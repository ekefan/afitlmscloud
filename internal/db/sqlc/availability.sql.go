// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: availability.sql

package db

import (
	"context"
)

const getLecturerAvailabilityForAllCourses = `-- name: GetLecturerAvailabilityForAllCourses :many
SELECT
    c.name As course_name,
    cl.availability,
    c.course_code
FROM course_lecturers cl
JOIN courses c ON c.course_code = cl.course_code
WHERE cl.lecturer_id = $1
`

type GetLecturerAvailabilityForAllCoursesRow struct {
	CourseName   string  `json:"course_name"`
	Availability float64 `json:"availability"`
	CourseCode   string  `json:"course_code"`
}

func (q *Queries) GetLecturerAvailabilityForAllCourses(ctx context.Context, lecturerID int64) ([]GetLecturerAvailabilityForAllCoursesRow, error) {
	rows, err := q.query(ctx, q.getLecturerAvailabilityForAllCoursesStmt, getLecturerAvailabilityForAllCourses, lecturerID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetLecturerAvailabilityForAllCoursesRow{}
	for rows.Next() {
		var i GetLecturerAvailabilityForAllCoursesRow
		if err := rows.Scan(&i.CourseName, &i.Availability, &i.CourseCode); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
