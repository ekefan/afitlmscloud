// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: students.sql

package db

import (
	"context"

	"github.com/lib/pq"
)

const createStudent = `-- name: CreateStudent :one
INSERT INTO students (
    user_id, courses, biometric_template
) VALUES (
    $1, $2, $3
) RETURNING id, user_id, courses, biometric_template, updated_at
`

type CreateStudentParams struct {
	UserID            int64    `json:"user_id"`
	Courses           []string `json:"courses"`
	BiometricTemplate []byte   `json:"biometric_template"`
}

func (q *Queries) CreateStudent(ctx context.Context, arg CreateStudentParams) (Student, error) {
	row := q.queryRow(ctx, q.createStudentStmt, createStudent, arg.UserID, pq.Array(arg.Courses), arg.BiometricTemplate)
	var i Student
	err := row.Scan(
		&i.ID,
		&i.UserID,
		pq.Array(&i.Courses),
		&i.BiometricTemplate,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteStudent = `-- name: DeleteStudent :exec
DELETE FROM students WHERE id = $1
`

func (q *Queries) DeleteStudent(ctx context.Context, id int64) error {
	_, err := q.exec(ctx, q.deleteStudentStmt, deleteStudent, id)
	return err
}

const getStudentByID = `-- name: GetStudentByID :one
SELECT id, user_id, courses, biometric_template, updated_at FROM students WHERE id = $1
`

func (q *Queries) GetStudentByID(ctx context.Context, id int64) (Student, error) {
	row := q.queryRow(ctx, q.getStudentByIDStmt, getStudentByID, id)
	var i Student
	err := row.Scan(
		&i.ID,
		&i.UserID,
		pq.Array(&i.Courses),
		&i.BiometricTemplate,
		&i.UpdatedAt,
	)
	return i, err
}

const getStudentByUserID = `-- name: GetStudentByUserID :one
SELECT id, user_id, courses, biometric_template, updated_at FROM students WHERE user_id = $1
`

func (q *Queries) GetStudentByUserID(ctx context.Context, userID int64) (Student, error) {
	row := q.queryRow(ctx, q.getStudentByUserIDStmt, getStudentByUserID, userID)
	var i Student
	err := row.Scan(
		&i.ID,
		&i.UserID,
		pq.Array(&i.Courses),
		&i.BiometricTemplate,
		&i.UpdatedAt,
	)
	return i, err
}

const listStudents = `-- name: ListStudents :many
SELECT id, user_id, courses, biometric_template, updated_at FROM students ORDER BY id
`

func (q *Queries) ListStudents(ctx context.Context) ([]Student, error) {
	rows, err := q.query(ctx, q.listStudentsStmt, listStudents)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Student{}
	for rows.Next() {
		var i Student
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			pq.Array(&i.Courses),
			&i.BiometricTemplate,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateStudentBiometric = `-- name: UpdateStudentBiometric :one
UPDATE students
SET biometric_template = $2, updated_at = now()
WHERE id = $1
RETURNING id, user_id, courses, biometric_template, updated_at
`

type UpdateStudentBiometricParams struct {
	ID                int64  `json:"id"`
	BiometricTemplate []byte `json:"biometric_template"`
}

func (q *Queries) UpdateStudentBiometric(ctx context.Context, arg UpdateStudentBiometricParams) (Student, error) {
	row := q.queryRow(ctx, q.updateStudentBiometricStmt, updateStudentBiometric, arg.ID, arg.BiometricTemplate)
	var i Student
	err := row.Scan(
		&i.ID,
		&i.UserID,
		pq.Array(&i.Courses),
		&i.BiometricTemplate,
		&i.UpdatedAt,
	)
	return i, err
}

const updateStudentCourses = `-- name: UpdateStudentCourses :one
UPDATE students
SET courses = $2, updated_at = now()
WHERE id = $1
RETURNING id, user_id, courses, biometric_template, updated_at
`

type UpdateStudentCoursesParams struct {
	ID      int64    `json:"id"`
	Courses []string `json:"courses"`
}

func (q *Queries) UpdateStudentCourses(ctx context.Context, arg UpdateStudentCoursesParams) (Student, error) {
	row := q.queryRow(ctx, q.updateStudentCoursesStmt, updateStudentCourses, arg.ID, pq.Array(arg.Courses))
	var i Student
	err := row.Scan(
		&i.ID,
		&i.UserID,
		pq.Array(&i.Courses),
		&i.BiometricTemplate,
		&i.UpdatedAt,
	)
	return i, err
}
