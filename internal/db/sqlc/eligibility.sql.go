// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: eligibility.sql

package db

import (
	"context"
)

const createEligibility = `-- name: CreateEligibility :one
INSERT INTO eligibility (
    course_id, student_id, value, min_value
) VALUES (
    $1, $2, $3, $4
) RETURNING id, course_id, student_id, value, min_value, updated_at
`

type CreateEligibilityParams struct {
	CourseID  int64 `json:"course_id"`
	StudentID int64 `json:"student_id"`
	Value     int32 `json:"value"`
	MinValue  int32 `json:"min_value"`
}

func (q *Queries) CreateEligibility(ctx context.Context, arg CreateEligibilityParams) (Eligibility, error) {
	row := q.queryRow(ctx, q.createEligibilityStmt, createEligibility,
		arg.CourseID,
		arg.StudentID,
		arg.Value,
		arg.MinValue,
	)
	var i Eligibility
	err := row.Scan(
		&i.ID,
		&i.CourseID,
		&i.StudentID,
		&i.Value,
		&i.MinValue,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteEligibility = `-- name: DeleteEligibility :exec
DELETE FROM eligibility
WHERE course_id = $1 AND student_id = $2
`

type DeleteEligibilityParams struct {
	CourseID  int64 `json:"course_id"`
	StudentID int64 `json:"student_id"`
}

func (q *Queries) DeleteEligibility(ctx context.Context, arg DeleteEligibilityParams) error {
	_, err := q.exec(ctx, q.deleteEligibilityStmt, deleteEligibility, arg.CourseID, arg.StudentID)
	return err
}

const getEligibility = `-- name: GetEligibility :one
SELECT id, course_id, student_id, value, min_value, updated_at FROM eligibility
WHERE course_id = $1 AND student_id = $2
`

type GetEligibilityParams struct {
	CourseID  int64 `json:"course_id"`
	StudentID int64 `json:"student_id"`
}

func (q *Queries) GetEligibility(ctx context.Context, arg GetEligibilityParams) (Eligibility, error) {
	row := q.queryRow(ctx, q.getEligibilityStmt, getEligibility, arg.CourseID, arg.StudentID)
	var i Eligibility
	err := row.Scan(
		&i.ID,
		&i.CourseID,
		&i.StudentID,
		&i.Value,
		&i.MinValue,
		&i.UpdatedAt,
	)
	return i, err
}

const listEligibilityForStudent = `-- name: ListEligibilityForStudent :many
SELECT id, course_id, student_id, value, min_value, updated_at FROM eligibility
WHERE student_id = $1
`

func (q *Queries) ListEligibilityForStudent(ctx context.Context, studentID int64) ([]Eligibility, error) {
	rows, err := q.query(ctx, q.listEligibilityForStudentStmt, listEligibilityForStudent, studentID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Eligibility{}
	for rows.Next() {
		var i Eligibility
		if err := rows.Scan(
			&i.ID,
			&i.CourseID,
			&i.StudentID,
			&i.Value,
			&i.MinValue,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateEligibility = `-- name: UpdateEligibility :one
UPDATE eligibility
SET value = $3, min_value = $4, updated_at = now()
WHERE course_id = $1 AND student_id = $2
RETURNING id, course_id, student_id, value, min_value, updated_at
`

type UpdateEligibilityParams struct {
	CourseID  int64 `json:"course_id"`
	StudentID int64 `json:"student_id"`
	Value     int32 `json:"value"`
	MinValue  int32 `json:"min_value"`
}

func (q *Queries) UpdateEligibility(ctx context.Context, arg UpdateEligibilityParams) (Eligibility, error) {
	row := q.queryRow(ctx, q.updateEligibilityStmt, updateEligibility,
		arg.CourseID,
		arg.StudentID,
		arg.Value,
		arg.MinValue,
	)
	var i Eligibility
	err := row.Scan(
		&i.ID,
		&i.CourseID,
		&i.StudentID,
		&i.Value,
		&i.MinValue,
		&i.UpdatedAt,
	)
	return i, err
}
