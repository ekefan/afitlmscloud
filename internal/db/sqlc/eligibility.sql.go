// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: eligibility.sql

package db

import (
	"context"
)

const getAllStudentsEligibilityForCourse = `-- name: GetAllStudentsEligibilityForCourse :many
SELECT
    cs.student_id,
    cs.attended_lecture_count,
    c.num_of_lectures_per_semester
FROM course_students cs
JOIN courses c ON c.course_code = cs.course_code
WHERE cs.course_code = $1
`

type GetAllStudentsEligibilityForCourseRow struct {
	StudentID                int64 `json:"student_id"`
	AttendedLectureCount     int32 `json:"attended_lecture_count"`
	NumOfLecturesPerSemester int32 `json:"num_of_lectures_per_semester"`
}

func (q *Queries) GetAllStudentsEligibilityForCourse(ctx context.Context, courseCode string) ([]GetAllStudentsEligibilityForCourseRow, error) {
	rows, err := q.query(ctx, q.getAllStudentsEligibilityForCourseStmt, getAllStudentsEligibilityForCourse, courseCode)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetAllStudentsEligibilityForCourseRow{}
	for rows.Next() {
		var i GetAllStudentsEligibilityForCourseRow
		if err := rows.Scan(&i.StudentID, &i.AttendedLectureCount, &i.NumOfLecturesPerSemester); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getStudentEligibilityForAllCourses = `-- name: GetStudentEligibilityForAllCourses :many
SELECT
    c.name AS course_name,
    c.course_code,
    cs.attended_lecture_count,
    c.num_of_lectures_per_semester
FROM course_students cs
JOIN courses c ON c.course_code = cs.course_code
WHERE cs.student_id = $1
`

type GetStudentEligibilityForAllCoursesRow struct {
	CourseName               string `json:"course_name"`
	CourseCode               string `json:"course_code"`
	AttendedLectureCount     int32  `json:"attended_lecture_count"`
	NumOfLecturesPerSemester int32  `json:"num_of_lectures_per_semester"`
}

func (q *Queries) GetStudentEligibilityForAllCourses(ctx context.Context, studentID int64) ([]GetStudentEligibilityForAllCoursesRow, error) {
	rows, err := q.query(ctx, q.getStudentEligibilityForAllCoursesStmt, getStudentEligibilityForAllCourses, studentID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetStudentEligibilityForAllCoursesRow{}
	for rows.Next() {
		var i GetStudentEligibilityForAllCoursesRow
		if err := rows.Scan(
			&i.CourseName,
			&i.CourseCode,
			&i.AttendedLectureCount,
			&i.NumOfLecturesPerSemester,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateStudentStudentEligibility = `-- name: UpdateStudentStudentEligibility :exec
UPDATE course_students
SET attended_lecture_count = attended_lecture_count + 1
WHERE student_id = $2 AND course_code = $1
`

type UpdateStudentStudentEligibilityParams struct {
	CourseCode string `json:"course_code"`
	StudentID  int64  `json:"student_id"`
}

func (q *Queries) UpdateStudentStudentEligibility(ctx context.Context, arg UpdateStudentStudentEligibilityParams) error {
	_, err := q.exec(ctx, q.updateStudentStudentEligibilityStmt, updateStudentStudentEligibility, arg.CourseCode, arg.StudentID)
	return err
}
