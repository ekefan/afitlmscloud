// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0

package db

import (
	"context"
	"database/sql"
	"fmt"
)

type DBTX interface {
	ExecContext(context.Context, string, ...interface{}) (sql.Result, error)
	PrepareContext(context.Context, string) (*sql.Stmt, error)
	QueryContext(context.Context, string, ...interface{}) (*sql.Rows, error)
	QueryRowContext(context.Context, string, ...interface{}) *sql.Row
}

func New(db DBTX) *Queries {
	return &Queries{db: db}
}

func Prepare(ctx context.Context, db DBTX) (*Queries, error) {
	q := Queries{db: db}
	var err error
	if q.createEligibilityStmt, err = db.PrepareContext(ctx, createEligibility); err != nil {
		return nil, fmt.Errorf("error preparing query CreateEligibility: %w", err)
	}
	if q.createStudentStmt, err = db.PrepareContext(ctx, createStudent); err != nil {
		return nil, fmt.Errorf("error preparing query CreateStudent: %w", err)
	}
	if q.createUserStmt, err = db.PrepareContext(ctx, createUser); err != nil {
		return nil, fmt.Errorf("error preparing query CreateUser: %w", err)
	}
	if q.deleteEligibilityStmt, err = db.PrepareContext(ctx, deleteEligibility); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteEligibility: %w", err)
	}
	if q.deleteStudentStmt, err = db.PrepareContext(ctx, deleteStudent); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteStudent: %w", err)
	}
	if q.deleteUserStmt, err = db.PrepareContext(ctx, deleteUser); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteUser: %w", err)
	}
	if q.getEligibilityStmt, err = db.PrepareContext(ctx, getEligibility); err != nil {
		return nil, fmt.Errorf("error preparing query GetEligibility: %w", err)
	}
	if q.getStudentByIDStmt, err = db.PrepareContext(ctx, getStudentByID); err != nil {
		return nil, fmt.Errorf("error preparing query GetStudentByID: %w", err)
	}
	if q.getStudentByUserIDStmt, err = db.PrepareContext(ctx, getStudentByUserID); err != nil {
		return nil, fmt.Errorf("error preparing query GetStudentByUserID: %w", err)
	}
	if q.getUserByIDStmt, err = db.PrepareContext(ctx, getUserByID); err != nil {
		return nil, fmt.Errorf("error preparing query GetUserByID: %w", err)
	}
	if q.listEligibilityForStudentStmt, err = db.PrepareContext(ctx, listEligibilityForStudent); err != nil {
		return nil, fmt.Errorf("error preparing query ListEligibilityForStudent: %w", err)
	}
	if q.listStudentsStmt, err = db.PrepareContext(ctx, listStudents); err != nil {
		return nil, fmt.Errorf("error preparing query ListStudents: %w", err)
	}
	if q.updateEligibilityStmt, err = db.PrepareContext(ctx, updateEligibility); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateEligibility: %w", err)
	}
	if q.updateStudentBiometricStmt, err = db.PrepareContext(ctx, updateStudentBiometric); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateStudentBiometric: %w", err)
	}
	if q.updateStudentCoursesStmt, err = db.PrepareContext(ctx, updateStudentCourses); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateStudentCourses: %w", err)
	}
	if q.updateUserStmt, err = db.PrepareContext(ctx, updateUser); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateUser: %w", err)
	}
	return &q, nil
}

func (q *Queries) Close() error {
	var err error
	if q.createEligibilityStmt != nil {
		if cerr := q.createEligibilityStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createEligibilityStmt: %w", cerr)
		}
	}
	if q.createStudentStmt != nil {
		if cerr := q.createStudentStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createStudentStmt: %w", cerr)
		}
	}
	if q.createUserStmt != nil {
		if cerr := q.createUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createUserStmt: %w", cerr)
		}
	}
	if q.deleteEligibilityStmt != nil {
		if cerr := q.deleteEligibilityStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteEligibilityStmt: %w", cerr)
		}
	}
	if q.deleteStudentStmt != nil {
		if cerr := q.deleteStudentStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteStudentStmt: %w", cerr)
		}
	}
	if q.deleteUserStmt != nil {
		if cerr := q.deleteUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteUserStmt: %w", cerr)
		}
	}
	if q.getEligibilityStmt != nil {
		if cerr := q.getEligibilityStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getEligibilityStmt: %w", cerr)
		}
	}
	if q.getStudentByIDStmt != nil {
		if cerr := q.getStudentByIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getStudentByIDStmt: %w", cerr)
		}
	}
	if q.getStudentByUserIDStmt != nil {
		if cerr := q.getStudentByUserIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getStudentByUserIDStmt: %w", cerr)
		}
	}
	if q.getUserByIDStmt != nil {
		if cerr := q.getUserByIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getUserByIDStmt: %w", cerr)
		}
	}
	if q.listEligibilityForStudentStmt != nil {
		if cerr := q.listEligibilityForStudentStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listEligibilityForStudentStmt: %w", cerr)
		}
	}
	if q.listStudentsStmt != nil {
		if cerr := q.listStudentsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listStudentsStmt: %w", cerr)
		}
	}
	if q.updateEligibilityStmt != nil {
		if cerr := q.updateEligibilityStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateEligibilityStmt: %w", cerr)
		}
	}
	if q.updateStudentBiometricStmt != nil {
		if cerr := q.updateStudentBiometricStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateStudentBiometricStmt: %w", cerr)
		}
	}
	if q.updateStudentCoursesStmt != nil {
		if cerr := q.updateStudentCoursesStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateStudentCoursesStmt: %w", cerr)
		}
	}
	if q.updateUserStmt != nil {
		if cerr := q.updateUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateUserStmt: %w", cerr)
		}
	}
	return err
}

func (q *Queries) exec(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (sql.Result, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).ExecContext(ctx, args...)
	case stmt != nil:
		return stmt.ExecContext(ctx, args...)
	default:
		return q.db.ExecContext(ctx, query, args...)
	}
}

func (q *Queries) query(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (*sql.Rows, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryContext(ctx, args...)
	default:
		return q.db.QueryContext(ctx, query, args...)
	}
}

func (q *Queries) queryRow(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) *sql.Row {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryRowContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryRowContext(ctx, args...)
	default:
		return q.db.QueryRowContext(ctx, query, args...)
	}
}

type Queries struct {
	db                            DBTX
	tx                            *sql.Tx
	createEligibilityStmt         *sql.Stmt
	createStudentStmt             *sql.Stmt
	createUserStmt                *sql.Stmt
	deleteEligibilityStmt         *sql.Stmt
	deleteStudentStmt             *sql.Stmt
	deleteUserStmt                *sql.Stmt
	getEligibilityStmt            *sql.Stmt
	getStudentByIDStmt            *sql.Stmt
	getStudentByUserIDStmt        *sql.Stmt
	getUserByIDStmt               *sql.Stmt
	listEligibilityForStudentStmt *sql.Stmt
	listStudentsStmt              *sql.Stmt
	updateEligibilityStmt         *sql.Stmt
	updateStudentBiometricStmt    *sql.Stmt
	updateStudentCoursesStmt      *sql.Stmt
	updateUserStmt                *sql.Stmt
}

func (q *Queries) WithTx(tx *sql.Tx) *Queries {
	return &Queries{
		db:                            tx,
		tx:                            tx,
		createEligibilityStmt:         q.createEligibilityStmt,
		createStudentStmt:             q.createStudentStmt,
		createUserStmt:                q.createUserStmt,
		deleteEligibilityStmt:         q.deleteEligibilityStmt,
		deleteStudentStmt:             q.deleteStudentStmt,
		deleteUserStmt:                q.deleteUserStmt,
		getEligibilityStmt:            q.getEligibilityStmt,
		getStudentByIDStmt:            q.getStudentByIDStmt,
		getStudentByUserIDStmt:        q.getStudentByUserIDStmt,
		getUserByIDStmt:               q.getUserByIDStmt,
		listEligibilityForStudentStmt: q.listEligibilityForStudentStmt,
		listStudentsStmt:              q.listStudentsStmt,
		updateEligibilityStmt:         q.updateEligibilityStmt,
		updateStudentBiometricStmt:    q.updateStudentBiometricStmt,
		updateStudentCoursesStmt:      q.updateStudentCoursesStmt,
		updateUserStmt:                q.updateUserStmt,
	}
}
