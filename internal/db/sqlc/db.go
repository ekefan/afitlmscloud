// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0

package db

import (
	"context"
	"database/sql"
	"fmt"
)

type DBTX interface {
	ExecContext(context.Context, string, ...interface{}) (sql.Result, error)
	PrepareContext(context.Context, string) (*sql.Stmt, error)
	QueryContext(context.Context, string, ...interface{}) (*sql.Rows, error)
	QueryRowContext(context.Context, string, ...interface{}) *sql.Row
}

func New(db DBTX) *Queries {
	return &Queries{db: db}
}

func Prepare(ctx context.Context, db DBTX) (*Queries, error) {
	q := Queries{db: db}
	var err error
	if q.assignLecturerToCourseStmt, err = db.PrepareContext(ctx, assignLecturerToCourse); err != nil {
		return nil, fmt.Errorf("error preparing query AssignLecturerToCourse: %w", err)
	}
	if q.batchGetEligibilityMetaDataStmt, err = db.PrepareContext(ctx, batchGetEligibilityMetaData); err != nil {
		return nil, fmt.Errorf("error preparing query BatchGetEligibilityMetaData: %w", err)
	}
	if q.createCourseStmt, err = db.PrepareContext(ctx, createCourse); err != nil {
		return nil, fmt.Errorf("error preparing query CreateCourse: %w", err)
	}
	if q.createLectureAttendanceStmt, err = db.PrepareContext(ctx, createLectureAttendance); err != nil {
		return nil, fmt.Errorf("error preparing query CreateLectureAttendance: %w", err)
	}
	if q.createLectureSessionStmt, err = db.PrepareContext(ctx, createLectureSession); err != nil {
		return nil, fmt.Errorf("error preparing query CreateLectureSession: %w", err)
	}
	if q.createLecturerStmt, err = db.PrepareContext(ctx, createLecturer); err != nil {
		return nil, fmt.Errorf("error preparing query CreateLecturer: %w", err)
	}
	if q.createStudentStmt, err = db.PrepareContext(ctx, createStudent); err != nil {
		return nil, fmt.Errorf("error preparing query CreateStudent: %w", err)
	}
	if q.createUserStmt, err = db.PrepareContext(ctx, createUser); err != nil {
		return nil, fmt.Errorf("error preparing query CreateUser: %w", err)
	}
	if q.deleteCourseStmt, err = db.PrepareContext(ctx, deleteCourse); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteCourse: %w", err)
	}
	if q.deleteLecturerStmt, err = db.PrepareContext(ctx, deleteLecturer); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteLecturer: %w", err)
	}
	if q.deleteStudentStmt, err = db.PrepareContext(ctx, deleteStudent); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteStudent: %w", err)
	}
	if q.deleteUserStmt, err = db.PrepareContext(ctx, deleteUser); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteUser: %w", err)
	}
	if q.dropCourseStmt, err = db.PrepareContext(ctx, dropCourse); err != nil {
		return nil, fmt.Errorf("error preparing query DropCourse: %w", err)
	}
	if q.enrollUserStmt, err = db.PrepareContext(ctx, enrollUser); err != nil {
		return nil, fmt.Errorf("error preparing query EnrollUser: %w", err)
	}
	if q.getAllStudentsEligibilityForCourseStmt, err = db.PrepareContext(ctx, getAllStudentsEligibilityForCourse); err != nil {
		return nil, fmt.Errorf("error preparing query GetAllStudentsEligibilityForCourse: %w", err)
	}
	if q.getCourseStmt, err = db.PrepareContext(ctx, getCourse); err != nil {
		return nil, fmt.Errorf("error preparing query GetCourse: %w", err)
	}
	if q.getCourseMetaDataStmt, err = db.PrepareContext(ctx, getCourseMetaData); err != nil {
		return nil, fmt.Errorf("error preparing query GetCourseMetaData: %w", err)
	}
	if q.getCoursesFilteredStmt, err = db.PrepareContext(ctx, getCoursesFiltered); err != nil {
		return nil, fmt.Errorf("error preparing query GetCoursesFiltered: %w", err)
	}
	if q.getLectureAttendanceStmt, err = db.PrepareContext(ctx, getLectureAttendance); err != nil {
		return nil, fmt.Errorf("error preparing query GetLectureAttendance: %w", err)
	}
	if q.getLectureSessionStmt, err = db.PrepareContext(ctx, getLectureSession); err != nil {
		return nil, fmt.Errorf("error preparing query GetLectureSession: %w", err)
	}
	if q.getLecturerAvailabilityForAllCoursesStmt, err = db.PrepareContext(ctx, getLecturerAvailabilityForAllCourses); err != nil {
		return nil, fmt.Errorf("error preparing query GetLecturerAvailabilityForAllCourses: %w", err)
	}
	if q.getLecturerByIDStmt, err = db.PrepareContext(ctx, getLecturerByID); err != nil {
		return nil, fmt.Errorf("error preparing query GetLecturerByID: %w", err)
	}
	if q.getLecturerByUserIDStmt, err = db.PrepareContext(ctx, getLecturerByUserID); err != nil {
		return nil, fmt.Errorf("error preparing query GetLecturerByUserID: %w", err)
	}
	if q.getStudentByIDStmt, err = db.PrepareContext(ctx, getStudentByID); err != nil {
		return nil, fmt.Errorf("error preparing query GetStudentByID: %w", err)
	}
	if q.getStudentByUserIDStmt, err = db.PrepareContext(ctx, getStudentByUserID); err != nil {
		return nil, fmt.Errorf("error preparing query GetStudentByUserID: %w", err)
	}
	if q.getStudentEligibilityForAllCoursesStmt, err = db.PrepareContext(ctx, getStudentEligibilityForAllCourses); err != nil {
		return nil, fmt.Errorf("error preparing query GetStudentEligibilityForAllCourses: %w", err)
	}
	if q.getUserByEmailStmt, err = db.PrepareContext(ctx, getUserByEmail); err != nil {
		return nil, fmt.Errorf("error preparing query GetUserByEmail: %w", err)
	}
	if q.getUserByIDStmt, err = db.PrepareContext(ctx, getUserByID); err != nil {
		return nil, fmt.Errorf("error preparing query GetUserByID: %w", err)
	}
	if q.registerCourseStmt, err = db.PrepareContext(ctx, registerCourse); err != nil {
		return nil, fmt.Errorf("error preparing query RegisterCourse: %w", err)
	}
	if q.removeActiveLecturerStmt, err = db.PrepareContext(ctx, removeActiveLecturer); err != nil {
		return nil, fmt.Errorf("error preparing query RemoveActiveLecturer: %w", err)
	}
	if q.setActiveLecturerStmt, err = db.PrepareContext(ctx, setActiveLecturer); err != nil {
		return nil, fmt.Errorf("error preparing query SetActiveLecturer: %w", err)
	}
	if q.unassignLecturerFromCourseStmt, err = db.PrepareContext(ctx, unassignLecturerFromCourse); err != nil {
		return nil, fmt.Errorf("error preparing query UnassignLecturerFromCourse: %w", err)
	}
	if q.updateCourseNumberOfLecturesPerSemesterStmt, err = db.PrepareContext(ctx, updateCourseNumberOfLecturesPerSemester); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateCourseNumberOfLecturesPerSemester: %w", err)
	}
	if q.updateLecturerAttendedCountStmt, err = db.PrepareContext(ctx, updateLecturerAttendedCount); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateLecturerAttendedCount: %w", err)
	}
	if q.updateLecturerCoursesStmt, err = db.PrepareContext(ctx, updateLecturerCourses); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateLecturerCourses: %w", err)
	}
	if q.updateStudentCoursesStmt, err = db.PrepareContext(ctx, updateStudentCourses); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateStudentCourses: %w", err)
	}
	if q.updateStudentStudentEligibilityStmt, err = db.PrepareContext(ctx, updateStudentStudentEligibility); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateStudentStudentEligibility: %w", err)
	}
	if q.updateUserEmailStmt, err = db.PrepareContext(ctx, updateUserEmail); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateUserEmail: %w", err)
	}
	if q.updateUserPasswordStmt, err = db.PrepareContext(ctx, updateUserPassword); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateUserPassword: %w", err)
	}
	return &q, nil
}

func (q *Queries) Close() error {
	var err error
	if q.assignLecturerToCourseStmt != nil {
		if cerr := q.assignLecturerToCourseStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing assignLecturerToCourseStmt: %w", cerr)
		}
	}
	if q.batchGetEligibilityMetaDataStmt != nil {
		if cerr := q.batchGetEligibilityMetaDataStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing batchGetEligibilityMetaDataStmt: %w", cerr)
		}
	}
	if q.createCourseStmt != nil {
		if cerr := q.createCourseStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createCourseStmt: %w", cerr)
		}
	}
	if q.createLectureAttendanceStmt != nil {
		if cerr := q.createLectureAttendanceStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createLectureAttendanceStmt: %w", cerr)
		}
	}
	if q.createLectureSessionStmt != nil {
		if cerr := q.createLectureSessionStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createLectureSessionStmt: %w", cerr)
		}
	}
	if q.createLecturerStmt != nil {
		if cerr := q.createLecturerStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createLecturerStmt: %w", cerr)
		}
	}
	if q.createStudentStmt != nil {
		if cerr := q.createStudentStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createStudentStmt: %w", cerr)
		}
	}
	if q.createUserStmt != nil {
		if cerr := q.createUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createUserStmt: %w", cerr)
		}
	}
	if q.deleteCourseStmt != nil {
		if cerr := q.deleteCourseStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteCourseStmt: %w", cerr)
		}
	}
	if q.deleteLecturerStmt != nil {
		if cerr := q.deleteLecturerStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteLecturerStmt: %w", cerr)
		}
	}
	if q.deleteStudentStmt != nil {
		if cerr := q.deleteStudentStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteStudentStmt: %w", cerr)
		}
	}
	if q.deleteUserStmt != nil {
		if cerr := q.deleteUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteUserStmt: %w", cerr)
		}
	}
	if q.dropCourseStmt != nil {
		if cerr := q.dropCourseStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing dropCourseStmt: %w", cerr)
		}
	}
	if q.enrollUserStmt != nil {
		if cerr := q.enrollUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing enrollUserStmt: %w", cerr)
		}
	}
	if q.getAllStudentsEligibilityForCourseStmt != nil {
		if cerr := q.getAllStudentsEligibilityForCourseStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getAllStudentsEligibilityForCourseStmt: %w", cerr)
		}
	}
	if q.getCourseStmt != nil {
		if cerr := q.getCourseStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getCourseStmt: %w", cerr)
		}
	}
	if q.getCourseMetaDataStmt != nil {
		if cerr := q.getCourseMetaDataStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getCourseMetaDataStmt: %w", cerr)
		}
	}
	if q.getCoursesFilteredStmt != nil {
		if cerr := q.getCoursesFilteredStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getCoursesFilteredStmt: %w", cerr)
		}
	}
	if q.getLectureAttendanceStmt != nil {
		if cerr := q.getLectureAttendanceStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getLectureAttendanceStmt: %w", cerr)
		}
	}
	if q.getLectureSessionStmt != nil {
		if cerr := q.getLectureSessionStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getLectureSessionStmt: %w", cerr)
		}
	}
	if q.getLecturerAvailabilityForAllCoursesStmt != nil {
		if cerr := q.getLecturerAvailabilityForAllCoursesStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getLecturerAvailabilityForAllCoursesStmt: %w", cerr)
		}
	}
	if q.getLecturerByIDStmt != nil {
		if cerr := q.getLecturerByIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getLecturerByIDStmt: %w", cerr)
		}
	}
	if q.getLecturerByUserIDStmt != nil {
		if cerr := q.getLecturerByUserIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getLecturerByUserIDStmt: %w", cerr)
		}
	}
	if q.getStudentByIDStmt != nil {
		if cerr := q.getStudentByIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getStudentByIDStmt: %w", cerr)
		}
	}
	if q.getStudentByUserIDStmt != nil {
		if cerr := q.getStudentByUserIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getStudentByUserIDStmt: %w", cerr)
		}
	}
	if q.getStudentEligibilityForAllCoursesStmt != nil {
		if cerr := q.getStudentEligibilityForAllCoursesStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getStudentEligibilityForAllCoursesStmt: %w", cerr)
		}
	}
	if q.getUserByEmailStmt != nil {
		if cerr := q.getUserByEmailStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getUserByEmailStmt: %w", cerr)
		}
	}
	if q.getUserByIDStmt != nil {
		if cerr := q.getUserByIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getUserByIDStmt: %w", cerr)
		}
	}
	if q.registerCourseStmt != nil {
		if cerr := q.registerCourseStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing registerCourseStmt: %w", cerr)
		}
	}
	if q.removeActiveLecturerStmt != nil {
		if cerr := q.removeActiveLecturerStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing removeActiveLecturerStmt: %w", cerr)
		}
	}
	if q.setActiveLecturerStmt != nil {
		if cerr := q.setActiveLecturerStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing setActiveLecturerStmt: %w", cerr)
		}
	}
	if q.unassignLecturerFromCourseStmt != nil {
		if cerr := q.unassignLecturerFromCourseStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing unassignLecturerFromCourseStmt: %w", cerr)
		}
	}
	if q.updateCourseNumberOfLecturesPerSemesterStmt != nil {
		if cerr := q.updateCourseNumberOfLecturesPerSemesterStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateCourseNumberOfLecturesPerSemesterStmt: %w", cerr)
		}
	}
	if q.updateLecturerAttendedCountStmt != nil {
		if cerr := q.updateLecturerAttendedCountStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateLecturerAttendedCountStmt: %w", cerr)
		}
	}
	if q.updateLecturerCoursesStmt != nil {
		if cerr := q.updateLecturerCoursesStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateLecturerCoursesStmt: %w", cerr)
		}
	}
	if q.updateStudentCoursesStmt != nil {
		if cerr := q.updateStudentCoursesStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateStudentCoursesStmt: %w", cerr)
		}
	}
	if q.updateStudentStudentEligibilityStmt != nil {
		if cerr := q.updateStudentStudentEligibilityStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateStudentStudentEligibilityStmt: %w", cerr)
		}
	}
	if q.updateUserEmailStmt != nil {
		if cerr := q.updateUserEmailStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateUserEmailStmt: %w", cerr)
		}
	}
	if q.updateUserPasswordStmt != nil {
		if cerr := q.updateUserPasswordStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateUserPasswordStmt: %w", cerr)
		}
	}
	return err
}

func (q *Queries) exec(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (sql.Result, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).ExecContext(ctx, args...)
	case stmt != nil:
		return stmt.ExecContext(ctx, args...)
	default:
		return q.db.ExecContext(ctx, query, args...)
	}
}

func (q *Queries) query(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (*sql.Rows, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryContext(ctx, args...)
	default:
		return q.db.QueryContext(ctx, query, args...)
	}
}

func (q *Queries) queryRow(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) *sql.Row {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryRowContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryRowContext(ctx, args...)
	default:
		return q.db.QueryRowContext(ctx, query, args...)
	}
}

type Queries struct {
	db                                          DBTX
	tx                                          *sql.Tx
	assignLecturerToCourseStmt                  *sql.Stmt
	batchGetEligibilityMetaDataStmt             *sql.Stmt
	createCourseStmt                            *sql.Stmt
	createLectureAttendanceStmt                 *sql.Stmt
	createLectureSessionStmt                    *sql.Stmt
	createLecturerStmt                          *sql.Stmt
	createStudentStmt                           *sql.Stmt
	createUserStmt                              *sql.Stmt
	deleteCourseStmt                            *sql.Stmt
	deleteLecturerStmt                          *sql.Stmt
	deleteStudentStmt                           *sql.Stmt
	deleteUserStmt                              *sql.Stmt
	dropCourseStmt                              *sql.Stmt
	enrollUserStmt                              *sql.Stmt
	getAllStudentsEligibilityForCourseStmt      *sql.Stmt
	getCourseStmt                               *sql.Stmt
	getCourseMetaDataStmt                       *sql.Stmt
	getCoursesFilteredStmt                      *sql.Stmt
	getLectureAttendanceStmt                    *sql.Stmt
	getLectureSessionStmt                       *sql.Stmt
	getLecturerAvailabilityForAllCoursesStmt    *sql.Stmt
	getLecturerByIDStmt                         *sql.Stmt
	getLecturerByUserIDStmt                     *sql.Stmt
	getStudentByIDStmt                          *sql.Stmt
	getStudentByUserIDStmt                      *sql.Stmt
	getStudentEligibilityForAllCoursesStmt      *sql.Stmt
	getUserByEmailStmt                          *sql.Stmt
	getUserByIDStmt                             *sql.Stmt
	registerCourseStmt                          *sql.Stmt
	removeActiveLecturerStmt                    *sql.Stmt
	setActiveLecturerStmt                       *sql.Stmt
	unassignLecturerFromCourseStmt              *sql.Stmt
	updateCourseNumberOfLecturesPerSemesterStmt *sql.Stmt
	updateLecturerAttendedCountStmt             *sql.Stmt
	updateLecturerCoursesStmt                   *sql.Stmt
	updateStudentCoursesStmt                    *sql.Stmt
	updateStudentStudentEligibilityStmt         *sql.Stmt
	updateUserEmailStmt                         *sql.Stmt
	updateUserPasswordStmt                      *sql.Stmt
}

func (q *Queries) WithTx(tx *sql.Tx) *Queries {
	return &Queries{
		db:                                          tx,
		tx:                                          tx,
		assignLecturerToCourseStmt:                  q.assignLecturerToCourseStmt,
		batchGetEligibilityMetaDataStmt:             q.batchGetEligibilityMetaDataStmt,
		createCourseStmt:                            q.createCourseStmt,
		createLectureAttendanceStmt:                 q.createLectureAttendanceStmt,
		createLectureSessionStmt:                    q.createLectureSessionStmt,
		createLecturerStmt:                          q.createLecturerStmt,
		createStudentStmt:                           q.createStudentStmt,
		createUserStmt:                              q.createUserStmt,
		deleteCourseStmt:                            q.deleteCourseStmt,
		deleteLecturerStmt:                          q.deleteLecturerStmt,
		deleteStudentStmt:                           q.deleteStudentStmt,
		deleteUserStmt:                              q.deleteUserStmt,
		dropCourseStmt:                              q.dropCourseStmt,
		enrollUserStmt:                              q.enrollUserStmt,
		getAllStudentsEligibilityForCourseStmt:      q.getAllStudentsEligibilityForCourseStmt,
		getCourseStmt:                               q.getCourseStmt,
		getCourseMetaDataStmt:                       q.getCourseMetaDataStmt,
		getCoursesFilteredStmt:                      q.getCoursesFilteredStmt,
		getLectureAttendanceStmt:                    q.getLectureAttendanceStmt,
		getLectureSessionStmt:                       q.getLectureSessionStmt,
		getLecturerAvailabilityForAllCoursesStmt:    q.getLecturerAvailabilityForAllCoursesStmt,
		getLecturerByIDStmt:                         q.getLecturerByIDStmt,
		getLecturerByUserIDStmt:                     q.getLecturerByUserIDStmt,
		getStudentByIDStmt:                          q.getStudentByIDStmt,
		getStudentByUserIDStmt:                      q.getStudentByUserIDStmt,
		getStudentEligibilityForAllCoursesStmt:      q.getStudentEligibilityForAllCoursesStmt,
		getUserByEmailStmt:                          q.getUserByEmailStmt,
		getUserByIDStmt:                             q.getUserByIDStmt,
		registerCourseStmt:                          q.registerCourseStmt,
		removeActiveLecturerStmt:                    q.removeActiveLecturerStmt,
		setActiveLecturerStmt:                       q.setActiveLecturerStmt,
		unassignLecturerFromCourseStmt:              q.unassignLecturerFromCourseStmt,
		updateCourseNumberOfLecturesPerSemesterStmt: q.updateCourseNumberOfLecturesPerSemesterStmt,
		updateLecturerAttendedCountStmt:             q.updateLecturerAttendedCountStmt,
		updateLecturerCoursesStmt:                   q.updateLecturerCoursesStmt,
		updateStudentCoursesStmt:                    q.updateStudentCoursesStmt,
		updateStudentStudentEligibilityStmt:         q.updateStudentStudentEligibilityStmt,
		updateUserEmailStmt:                         q.updateUserEmailStmt,
		updateUserPasswordStmt:                      q.updateUserPasswordStmt,
	}
}
