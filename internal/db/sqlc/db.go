// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0

package db

import (
	"context"
	"database/sql"
	"fmt"
)

type DBTX interface {
	ExecContext(context.Context, string, ...interface{}) (sql.Result, error)
	PrepareContext(context.Context, string) (*sql.Stmt, error)
	QueryContext(context.Context, string, ...interface{}) (*sql.Rows, error)
	QueryRowContext(context.Context, string, ...interface{}) *sql.Row
}

func New(db DBTX) *Queries {
	return &Queries{db: db}
}

func Prepare(ctx context.Context, db DBTX) (*Queries, error) {
	q := Queries{db: db}
	var err error
	if q.assignLecturerToCourseStmt, err = db.PrepareContext(ctx, assignLecturerToCourse); err != nil {
		return nil, fmt.Errorf("error preparing query AssignLecturerToCourse: %w", err)
	}
	if q.createCourseStmt, err = db.PrepareContext(ctx, createCourse); err != nil {
		return nil, fmt.Errorf("error preparing query CreateCourse: %w", err)
	}
	if q.createLecturerStmt, err = db.PrepareContext(ctx, createLecturer); err != nil {
		return nil, fmt.Errorf("error preparing query CreateLecturer: %w", err)
	}
	if q.createStudentStmt, err = db.PrepareContext(ctx, createStudent); err != nil {
		return nil, fmt.Errorf("error preparing query CreateStudent: %w", err)
	}
	if q.createUserStmt, err = db.PrepareContext(ctx, createUser); err != nil {
		return nil, fmt.Errorf("error preparing query CreateUser: %w", err)
	}
	if q.deleteLecturerStmt, err = db.PrepareContext(ctx, deleteLecturer); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteLecturer: %w", err)
	}
	if q.deleteStudentStmt, err = db.PrepareContext(ctx, deleteStudent); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteStudent: %w", err)
	}
	if q.deleteUserStmt, err = db.PrepareContext(ctx, deleteUser); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteUser: %w", err)
	}
	if q.dropCourseStmt, err = db.PrepareContext(ctx, dropCourse); err != nil {
		return nil, fmt.Errorf("error preparing query DropCourse: %w", err)
	}
	if q.enrollUserStmt, err = db.PrepareContext(ctx, enrollUser); err != nil {
		return nil, fmt.Errorf("error preparing query EnrollUser: %w", err)
	}
	if q.getLecturerAvailabilityForAllCoursesStmt, err = db.PrepareContext(ctx, getLecturerAvailabilityForAllCourses); err != nil {
		return nil, fmt.Errorf("error preparing query GetLecturerAvailabilityForAllCourses: %w", err)
	}
	if q.getLecturerByIDStmt, err = db.PrepareContext(ctx, getLecturerByID); err != nil {
		return nil, fmt.Errorf("error preparing query GetLecturerByID: %w", err)
	}
	if q.getLecturerByUserIDStmt, err = db.PrepareContext(ctx, getLecturerByUserID); err != nil {
		return nil, fmt.Errorf("error preparing query GetLecturerByUserID: %w", err)
	}
	if q.getStudentByIDStmt, err = db.PrepareContext(ctx, getStudentByID); err != nil {
		return nil, fmt.Errorf("error preparing query GetStudentByID: %w", err)
	}
	if q.getStudentByUserIDStmt, err = db.PrepareContext(ctx, getStudentByUserID); err != nil {
		return nil, fmt.Errorf("error preparing query GetStudentByUserID: %w", err)
	}
	if q.getStudentEligibilityForAllCoursesStmt, err = db.PrepareContext(ctx, getStudentEligibilityForAllCourses); err != nil {
		return nil, fmt.Errorf("error preparing query GetStudentEligibilityForAllCourses: %w", err)
	}
	if q.getUserByEmailStmt, err = db.PrepareContext(ctx, getUserByEmail); err != nil {
		return nil, fmt.Errorf("error preparing query GetUserByEmail: %w", err)
	}
	if q.getUserByIDStmt, err = db.PrepareContext(ctx, getUserByID); err != nil {
		return nil, fmt.Errorf("error preparing query GetUserByID: %w", err)
	}
	if q.registerCourseStmt, err = db.PrepareContext(ctx, registerCourse); err != nil {
		return nil, fmt.Errorf("error preparing query RegisterCourse: %w", err)
	}
	if q.setActiveLecturerStmt, err = db.PrepareContext(ctx, setActiveLecturer); err != nil {
		return nil, fmt.Errorf("error preparing query SetActiveLecturer: %w", err)
	}
	if q.unassignLecturerFromCourseStmt, err = db.PrepareContext(ctx, unassignLecturerFromCourse); err != nil {
		return nil, fmt.Errorf("error preparing query UnassignLecturerFromCourse: %w", err)
	}
	if q.updateLecturerCoursesStmt, err = db.PrepareContext(ctx, updateLecturerCourses); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateLecturerCourses: %w", err)
	}
	if q.updateStudentCoursesStmt, err = db.PrepareContext(ctx, updateStudentCourses); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateStudentCourses: %w", err)
	}
	if q.updateUserEmailStmt, err = db.PrepareContext(ctx, updateUserEmail); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateUserEmail: %w", err)
	}
	if q.updateUserPasswordStmt, err = db.PrepareContext(ctx, updateUserPassword); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateUserPassword: %w", err)
	}
	return &q, nil
}

func (q *Queries) Close() error {
	var err error
	if q.assignLecturerToCourseStmt != nil {
		if cerr := q.assignLecturerToCourseStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing assignLecturerToCourseStmt: %w", cerr)
		}
	}
	if q.createCourseStmt != nil {
		if cerr := q.createCourseStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createCourseStmt: %w", cerr)
		}
	}
	if q.createLecturerStmt != nil {
		if cerr := q.createLecturerStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createLecturerStmt: %w", cerr)
		}
	}
	if q.createStudentStmt != nil {
		if cerr := q.createStudentStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createStudentStmt: %w", cerr)
		}
	}
	if q.createUserStmt != nil {
		if cerr := q.createUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createUserStmt: %w", cerr)
		}
	}
	if q.deleteLecturerStmt != nil {
		if cerr := q.deleteLecturerStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteLecturerStmt: %w", cerr)
		}
	}
	if q.deleteStudentStmt != nil {
		if cerr := q.deleteStudentStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteStudentStmt: %w", cerr)
		}
	}
	if q.deleteUserStmt != nil {
		if cerr := q.deleteUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteUserStmt: %w", cerr)
		}
	}
	if q.dropCourseStmt != nil {
		if cerr := q.dropCourseStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing dropCourseStmt: %w", cerr)
		}
	}
	if q.enrollUserStmt != nil {
		if cerr := q.enrollUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing enrollUserStmt: %w", cerr)
		}
	}
	if q.getLecturerAvailabilityForAllCoursesStmt != nil {
		if cerr := q.getLecturerAvailabilityForAllCoursesStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getLecturerAvailabilityForAllCoursesStmt: %w", cerr)
		}
	}
	if q.getLecturerByIDStmt != nil {
		if cerr := q.getLecturerByIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getLecturerByIDStmt: %w", cerr)
		}
	}
	if q.getLecturerByUserIDStmt != nil {
		if cerr := q.getLecturerByUserIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getLecturerByUserIDStmt: %w", cerr)
		}
	}
	if q.getStudentByIDStmt != nil {
		if cerr := q.getStudentByIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getStudentByIDStmt: %w", cerr)
		}
	}
	if q.getStudentByUserIDStmt != nil {
		if cerr := q.getStudentByUserIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getStudentByUserIDStmt: %w", cerr)
		}
	}
	if q.getStudentEligibilityForAllCoursesStmt != nil {
		if cerr := q.getStudentEligibilityForAllCoursesStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getStudentEligibilityForAllCoursesStmt: %w", cerr)
		}
	}
	if q.getUserByEmailStmt != nil {
		if cerr := q.getUserByEmailStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getUserByEmailStmt: %w", cerr)
		}
	}
	if q.getUserByIDStmt != nil {
		if cerr := q.getUserByIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getUserByIDStmt: %w", cerr)
		}
	}
	if q.registerCourseStmt != nil {
		if cerr := q.registerCourseStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing registerCourseStmt: %w", cerr)
		}
	}
	if q.setActiveLecturerStmt != nil {
		if cerr := q.setActiveLecturerStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing setActiveLecturerStmt: %w", cerr)
		}
	}
	if q.unassignLecturerFromCourseStmt != nil {
		if cerr := q.unassignLecturerFromCourseStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing unassignLecturerFromCourseStmt: %w", cerr)
		}
	}
	if q.updateLecturerCoursesStmt != nil {
		if cerr := q.updateLecturerCoursesStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateLecturerCoursesStmt: %w", cerr)
		}
	}
	if q.updateStudentCoursesStmt != nil {
		if cerr := q.updateStudentCoursesStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateStudentCoursesStmt: %w", cerr)
		}
	}
	if q.updateUserEmailStmt != nil {
		if cerr := q.updateUserEmailStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateUserEmailStmt: %w", cerr)
		}
	}
	if q.updateUserPasswordStmt != nil {
		if cerr := q.updateUserPasswordStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateUserPasswordStmt: %w", cerr)
		}
	}
	return err
}

func (q *Queries) exec(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (sql.Result, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).ExecContext(ctx, args...)
	case stmt != nil:
		return stmt.ExecContext(ctx, args...)
	default:
		return q.db.ExecContext(ctx, query, args...)
	}
}

func (q *Queries) query(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (*sql.Rows, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryContext(ctx, args...)
	default:
		return q.db.QueryContext(ctx, query, args...)
	}
}

func (q *Queries) queryRow(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) *sql.Row {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryRowContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryRowContext(ctx, args...)
	default:
		return q.db.QueryRowContext(ctx, query, args...)
	}
}

type Queries struct {
	db                                       DBTX
	tx                                       *sql.Tx
	assignLecturerToCourseStmt               *sql.Stmt
	createCourseStmt                         *sql.Stmt
	createLecturerStmt                       *sql.Stmt
	createStudentStmt                        *sql.Stmt
	createUserStmt                           *sql.Stmt
	deleteLecturerStmt                       *sql.Stmt
	deleteStudentStmt                        *sql.Stmt
	deleteUserStmt                           *sql.Stmt
	dropCourseStmt                           *sql.Stmt
	enrollUserStmt                           *sql.Stmt
	getLecturerAvailabilityForAllCoursesStmt *sql.Stmt
	getLecturerByIDStmt                      *sql.Stmt
	getLecturerByUserIDStmt                  *sql.Stmt
	getStudentByIDStmt                       *sql.Stmt
	getStudentByUserIDStmt                   *sql.Stmt
	getStudentEligibilityForAllCoursesStmt   *sql.Stmt
	getUserByEmailStmt                       *sql.Stmt
	getUserByIDStmt                          *sql.Stmt
	registerCourseStmt                       *sql.Stmt
	setActiveLecturerStmt                    *sql.Stmt
	unassignLecturerFromCourseStmt           *sql.Stmt
	updateLecturerCoursesStmt                *sql.Stmt
	updateStudentCoursesStmt                 *sql.Stmt
	updateUserEmailStmt                      *sql.Stmt
	updateUserPasswordStmt                   *sql.Stmt
}

func (q *Queries) WithTx(tx *sql.Tx) *Queries {
	return &Queries{
		db:                                       tx,
		tx:                                       tx,
		assignLecturerToCourseStmt:               q.assignLecturerToCourseStmt,
		createCourseStmt:                         q.createCourseStmt,
		createLecturerStmt:                       q.createLecturerStmt,
		createStudentStmt:                        q.createStudentStmt,
		createUserStmt:                           q.createUserStmt,
		deleteLecturerStmt:                       q.deleteLecturerStmt,
		deleteStudentStmt:                        q.deleteStudentStmt,
		deleteUserStmt:                           q.deleteUserStmt,
		dropCourseStmt:                           q.dropCourseStmt,
		enrollUserStmt:                           q.enrollUserStmt,
		getLecturerAvailabilityForAllCoursesStmt: q.getLecturerAvailabilityForAllCoursesStmt,
		getLecturerByIDStmt:                      q.getLecturerByIDStmt,
		getLecturerByUserIDStmt:                  q.getLecturerByUserIDStmt,
		getStudentByIDStmt:                       q.getStudentByIDStmt,
		getStudentByUserIDStmt:                   q.getStudentByUserIDStmt,
		getStudentEligibilityForAllCoursesStmt:   q.getStudentEligibilityForAllCoursesStmt,
		getUserByEmailStmt:                       q.getUserByEmailStmt,
		getUserByIDStmt:                          q.getUserByIDStmt,
		registerCourseStmt:                       q.registerCourseStmt,
		setActiveLecturerStmt:                    q.setActiveLecturerStmt,
		unassignLecturerFromCourseStmt:           q.unassignLecturerFromCourseStmt,
		updateLecturerCoursesStmt:                q.updateLecturerCoursesStmt,
		updateStudentCoursesStmt:                 q.updateStudentCoursesStmt,
		updateUserEmailStmt:                      q.updateUserEmailStmt,
		updateUserPasswordStmt:                   q.updateUserPasswordStmt,
	}
}
