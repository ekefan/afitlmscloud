// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0

package db

import (
	"context"
	"database/sql"
	"fmt"
)

type DBTX interface {
	ExecContext(context.Context, string, ...interface{}) (sql.Result, error)
	PrepareContext(context.Context, string) (*sql.Stmt, error)
	QueryContext(context.Context, string, ...interface{}) (*sql.Rows, error)
	QueryRowContext(context.Context, string, ...interface{}) *sql.Row
}

func New(db DBTX) *Queries {
	return &Queries{db: db}
}

func Prepare(ctx context.Context, db DBTX) (*Queries, error) {
	q := Queries{db: db}
	var err error
	if q.createAvailabilityStmt, err = db.PrepareContext(ctx, createAvailability); err != nil {
		return nil, fmt.Errorf("error preparing query CreateAvailability: %w", err)
	}
	if q.createEligibilityStmt, err = db.PrepareContext(ctx, createEligibility); err != nil {
		return nil, fmt.Errorf("error preparing query CreateEligibility: %w", err)
	}
	if q.createLecturerStmt, err = db.PrepareContext(ctx, createLecturer); err != nil {
		return nil, fmt.Errorf("error preparing query CreateLecturer: %w", err)
	}
	if q.createStudentStmt, err = db.PrepareContext(ctx, createStudent); err != nil {
		return nil, fmt.Errorf("error preparing query CreateStudent: %w", err)
	}
	if q.createUserStmt, err = db.PrepareContext(ctx, createUser); err != nil {
		return nil, fmt.Errorf("error preparing query CreateUser: %w", err)
	}
	if q.deleteAvailabilityStmt, err = db.PrepareContext(ctx, deleteAvailability); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteAvailability: %w", err)
	}
	if q.deleteEligibilityStmt, err = db.PrepareContext(ctx, deleteEligibility); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteEligibility: %w", err)
	}
	if q.deleteLecturerStmt, err = db.PrepareContext(ctx, deleteLecturer); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteLecturer: %w", err)
	}
	if q.deleteStudentStmt, err = db.PrepareContext(ctx, deleteStudent); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteStudent: %w", err)
	}
	if q.deleteUserStmt, err = db.PrepareContext(ctx, deleteUser); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteUser: %w", err)
	}
	if q.enrollUserStmt, err = db.PrepareContext(ctx, enrollUser); err != nil {
		return nil, fmt.Errorf("error preparing query EnrollUser: %w", err)
	}
	if q.getAvailabilityStmt, err = db.PrepareContext(ctx, getAvailability); err != nil {
		return nil, fmt.Errorf("error preparing query GetAvailability: %w", err)
	}
	if q.getAvailabilityByCourseIdStmt, err = db.PrepareContext(ctx, getAvailabilityByCourseId); err != nil {
		return nil, fmt.Errorf("error preparing query GetAvailabilityByCourseId: %w", err)
	}
	if q.getEligibilityStmt, err = db.PrepareContext(ctx, getEligibility); err != nil {
		return nil, fmt.Errorf("error preparing query GetEligibility: %w", err)
	}
	if q.getEligibilityByCourseIdStmt, err = db.PrepareContext(ctx, getEligibilityByCourseId); err != nil {
		return nil, fmt.Errorf("error preparing query GetEligibilityByCourseId: %w", err)
	}
	if q.getLecturerByIDStmt, err = db.PrepareContext(ctx, getLecturerByID); err != nil {
		return nil, fmt.Errorf("error preparing query GetLecturerByID: %w", err)
	}
	if q.getLecturerByUserIDStmt, err = db.PrepareContext(ctx, getLecturerByUserID); err != nil {
		return nil, fmt.Errorf("error preparing query GetLecturerByUserID: %w", err)
	}
	if q.getStudentByIDStmt, err = db.PrepareContext(ctx, getStudentByID); err != nil {
		return nil, fmt.Errorf("error preparing query GetStudentByID: %w", err)
	}
	if q.getStudentByUserIDStmt, err = db.PrepareContext(ctx, getStudentByUserID); err != nil {
		return nil, fmt.Errorf("error preparing query GetStudentByUserID: %w", err)
	}
	if q.getUserByEmailStmt, err = db.PrepareContext(ctx, getUserByEmail); err != nil {
		return nil, fmt.Errorf("error preparing query GetUserByEmail: %w", err)
	}
	if q.getUserByIDStmt, err = db.PrepareContext(ctx, getUserByID); err != nil {
		return nil, fmt.Errorf("error preparing query GetUserByID: %w", err)
	}
	if q.listAvailabilityForLecturerStmt, err = db.PrepareContext(ctx, listAvailabilityForLecturer); err != nil {
		return nil, fmt.Errorf("error preparing query ListAvailabilityForLecturer: %w", err)
	}
	if q.listEligibilityForStudentStmt, err = db.PrepareContext(ctx, listEligibilityForStudent); err != nil {
		return nil, fmt.Errorf("error preparing query ListEligibilityForStudent: %w", err)
	}
	if q.setMinEligibilityStmt, err = db.PrepareContext(ctx, setMinEligibility); err != nil {
		return nil, fmt.Errorf("error preparing query SetMinEligibility: %w", err)
	}
	if q.updateAvailabilityStmt, err = db.PrepareContext(ctx, updateAvailability); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateAvailability: %w", err)
	}
	if q.updateEligibilityStmt, err = db.PrepareContext(ctx, updateEligibility); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateEligibility: %w", err)
	}
	if q.updateLecturerCoursesStmt, err = db.PrepareContext(ctx, updateLecturerCourses); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateLecturerCourses: %w", err)
	}
	if q.updateStudentCoursesStmt, err = db.PrepareContext(ctx, updateStudentCourses); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateStudentCourses: %w", err)
	}
	if q.updateUserEmailStmt, err = db.PrepareContext(ctx, updateUserEmail); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateUserEmail: %w", err)
	}
	if q.updateUserPasswordStmt, err = db.PrepareContext(ctx, updateUserPassword); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateUserPassword: %w", err)
	}
	return &q, nil
}

func (q *Queries) Close() error {
	var err error
	if q.createAvailabilityStmt != nil {
		if cerr := q.createAvailabilityStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createAvailabilityStmt: %w", cerr)
		}
	}
	if q.createEligibilityStmt != nil {
		if cerr := q.createEligibilityStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createEligibilityStmt: %w", cerr)
		}
	}
	if q.createLecturerStmt != nil {
		if cerr := q.createLecturerStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createLecturerStmt: %w", cerr)
		}
	}
	if q.createStudentStmt != nil {
		if cerr := q.createStudentStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createStudentStmt: %w", cerr)
		}
	}
	if q.createUserStmt != nil {
		if cerr := q.createUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createUserStmt: %w", cerr)
		}
	}
	if q.deleteAvailabilityStmt != nil {
		if cerr := q.deleteAvailabilityStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteAvailabilityStmt: %w", cerr)
		}
	}
	if q.deleteEligibilityStmt != nil {
		if cerr := q.deleteEligibilityStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteEligibilityStmt: %w", cerr)
		}
	}
	if q.deleteLecturerStmt != nil {
		if cerr := q.deleteLecturerStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteLecturerStmt: %w", cerr)
		}
	}
	if q.deleteStudentStmt != nil {
		if cerr := q.deleteStudentStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteStudentStmt: %w", cerr)
		}
	}
	if q.deleteUserStmt != nil {
		if cerr := q.deleteUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteUserStmt: %w", cerr)
		}
	}
	if q.enrollUserStmt != nil {
		if cerr := q.enrollUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing enrollUserStmt: %w", cerr)
		}
	}
	if q.getAvailabilityStmt != nil {
		if cerr := q.getAvailabilityStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getAvailabilityStmt: %w", cerr)
		}
	}
	if q.getAvailabilityByCourseIdStmt != nil {
		if cerr := q.getAvailabilityByCourseIdStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getAvailabilityByCourseIdStmt: %w", cerr)
		}
	}
	if q.getEligibilityStmt != nil {
		if cerr := q.getEligibilityStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getEligibilityStmt: %w", cerr)
		}
	}
	if q.getEligibilityByCourseIdStmt != nil {
		if cerr := q.getEligibilityByCourseIdStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getEligibilityByCourseIdStmt: %w", cerr)
		}
	}
	if q.getLecturerByIDStmt != nil {
		if cerr := q.getLecturerByIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getLecturerByIDStmt: %w", cerr)
		}
	}
	if q.getLecturerByUserIDStmt != nil {
		if cerr := q.getLecturerByUserIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getLecturerByUserIDStmt: %w", cerr)
		}
	}
	if q.getStudentByIDStmt != nil {
		if cerr := q.getStudentByIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getStudentByIDStmt: %w", cerr)
		}
	}
	if q.getStudentByUserIDStmt != nil {
		if cerr := q.getStudentByUserIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getStudentByUserIDStmt: %w", cerr)
		}
	}
	if q.getUserByEmailStmt != nil {
		if cerr := q.getUserByEmailStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getUserByEmailStmt: %w", cerr)
		}
	}
	if q.getUserByIDStmt != nil {
		if cerr := q.getUserByIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getUserByIDStmt: %w", cerr)
		}
	}
	if q.listAvailabilityForLecturerStmt != nil {
		if cerr := q.listAvailabilityForLecturerStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listAvailabilityForLecturerStmt: %w", cerr)
		}
	}
	if q.listEligibilityForStudentStmt != nil {
		if cerr := q.listEligibilityForStudentStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listEligibilityForStudentStmt: %w", cerr)
		}
	}
	if q.setMinEligibilityStmt != nil {
		if cerr := q.setMinEligibilityStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing setMinEligibilityStmt: %w", cerr)
		}
	}
	if q.updateAvailabilityStmt != nil {
		if cerr := q.updateAvailabilityStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateAvailabilityStmt: %w", cerr)
		}
	}
	if q.updateEligibilityStmt != nil {
		if cerr := q.updateEligibilityStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateEligibilityStmt: %w", cerr)
		}
	}
	if q.updateLecturerCoursesStmt != nil {
		if cerr := q.updateLecturerCoursesStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateLecturerCoursesStmt: %w", cerr)
		}
	}
	if q.updateStudentCoursesStmt != nil {
		if cerr := q.updateStudentCoursesStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateStudentCoursesStmt: %w", cerr)
		}
	}
	if q.updateUserEmailStmt != nil {
		if cerr := q.updateUserEmailStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateUserEmailStmt: %w", cerr)
		}
	}
	if q.updateUserPasswordStmt != nil {
		if cerr := q.updateUserPasswordStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateUserPasswordStmt: %w", cerr)
		}
	}
	return err
}

func (q *Queries) exec(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (sql.Result, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).ExecContext(ctx, args...)
	case stmt != nil:
		return stmt.ExecContext(ctx, args...)
	default:
		return q.db.ExecContext(ctx, query, args...)
	}
}

func (q *Queries) query(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (*sql.Rows, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryContext(ctx, args...)
	default:
		return q.db.QueryContext(ctx, query, args...)
	}
}

func (q *Queries) queryRow(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) *sql.Row {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryRowContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryRowContext(ctx, args...)
	default:
		return q.db.QueryRowContext(ctx, query, args...)
	}
}

type Queries struct {
	db                              DBTX
	tx                              *sql.Tx
	createAvailabilityStmt          *sql.Stmt
	createEligibilityStmt           *sql.Stmt
	createLecturerStmt              *sql.Stmt
	createStudentStmt               *sql.Stmt
	createUserStmt                  *sql.Stmt
	deleteAvailabilityStmt          *sql.Stmt
	deleteEligibilityStmt           *sql.Stmt
	deleteLecturerStmt              *sql.Stmt
	deleteStudentStmt               *sql.Stmt
	deleteUserStmt                  *sql.Stmt
	enrollUserStmt                  *sql.Stmt
	getAvailabilityStmt             *sql.Stmt
	getAvailabilityByCourseIdStmt   *sql.Stmt
	getEligibilityStmt              *sql.Stmt
	getEligibilityByCourseIdStmt    *sql.Stmt
	getLecturerByIDStmt             *sql.Stmt
	getLecturerByUserIDStmt         *sql.Stmt
	getStudentByIDStmt              *sql.Stmt
	getStudentByUserIDStmt          *sql.Stmt
	getUserByEmailStmt              *sql.Stmt
	getUserByIDStmt                 *sql.Stmt
	listAvailabilityForLecturerStmt *sql.Stmt
	listEligibilityForStudentStmt   *sql.Stmt
	setMinEligibilityStmt           *sql.Stmt
	updateAvailabilityStmt          *sql.Stmt
	updateEligibilityStmt           *sql.Stmt
	updateLecturerCoursesStmt       *sql.Stmt
	updateStudentCoursesStmt        *sql.Stmt
	updateUserEmailStmt             *sql.Stmt
	updateUserPasswordStmt          *sql.Stmt
}

func (q *Queries) WithTx(tx *sql.Tx) *Queries {
	return &Queries{
		db:                              tx,
		tx:                              tx,
		createAvailabilityStmt:          q.createAvailabilityStmt,
		createEligibilityStmt:           q.createEligibilityStmt,
		createLecturerStmt:              q.createLecturerStmt,
		createStudentStmt:               q.createStudentStmt,
		createUserStmt:                  q.createUserStmt,
		deleteAvailabilityStmt:          q.deleteAvailabilityStmt,
		deleteEligibilityStmt:           q.deleteEligibilityStmt,
		deleteLecturerStmt:              q.deleteLecturerStmt,
		deleteStudentStmt:               q.deleteStudentStmt,
		deleteUserStmt:                  q.deleteUserStmt,
		enrollUserStmt:                  q.enrollUserStmt,
		getAvailabilityStmt:             q.getAvailabilityStmt,
		getAvailabilityByCourseIdStmt:   q.getAvailabilityByCourseIdStmt,
		getEligibilityStmt:              q.getEligibilityStmt,
		getEligibilityByCourseIdStmt:    q.getEligibilityByCourseIdStmt,
		getLecturerByIDStmt:             q.getLecturerByIDStmt,
		getLecturerByUserIDStmt:         q.getLecturerByUserIDStmt,
		getStudentByIDStmt:              q.getStudentByIDStmt,
		getStudentByUserIDStmt:          q.getStudentByUserIDStmt,
		getUserByEmailStmt:              q.getUserByEmailStmt,
		getUserByIDStmt:                 q.getUserByIDStmt,
		listAvailabilityForLecturerStmt: q.listAvailabilityForLecturerStmt,
		listEligibilityForStudentStmt:   q.listEligibilityForStudentStmt,
		setMinEligibilityStmt:           q.setMinEligibilityStmt,
		updateAvailabilityStmt:          q.updateAvailabilityStmt,
		updateEligibilityStmt:           q.updateEligibilityStmt,
		updateLecturerCoursesStmt:       q.updateLecturerCoursesStmt,
		updateStudentCoursesStmt:        q.updateStudentCoursesStmt,
		updateUserEmailStmt:             q.updateUserEmailStmt,
		updateUserPasswordStmt:          q.updateUserPasswordStmt,
	}
}
