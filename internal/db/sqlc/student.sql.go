// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: student.sql

package db

import (
	"context"
	"database/sql"

	"github.com/lib/pq"
)

const batchGetEligibilityMetaData = `-- name: BatchGetEligibilityMetaData :many
SELECT u.full_name, u.sch_id
FROM users u
WHERE id = ANY($1::bigint[])
`

type BatchGetEligibilityMetaDataRow struct {
	FullName string `json:"full_name"`
	SchID    string `json:"sch_id"`
}

func (q *Queries) BatchGetEligibilityMetaData(ctx context.Context, studentids []int64) ([]BatchGetEligibilityMetaDataRow, error) {
	rows, err := q.query(ctx, q.batchGetEligibilityMetaDataStmt, batchGetEligibilityMetaData, pq.Array(studentids))
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []BatchGetEligibilityMetaDataRow{}
	for rows.Next() {
		var i BatchGetEligibilityMetaDataRow
		if err := rows.Scan(&i.FullName, &i.SchID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const createStudent = `-- name: CreateStudent :one
INSERT INTO students (
    user_id
) VALUES (
    $1
) RETURNING id, user_id, courses, updated_at
`

func (q *Queries) CreateStudent(ctx context.Context, userID int64) (Student, error) {
	row := q.queryRow(ctx, q.createStudentStmt, createStudent, userID)
	var i Student
	err := row.Scan(
		&i.ID,
		&i.UserID,
		pq.Array(&i.Courses),
		&i.UpdatedAt,
	)
	return i, err
}

const deleteStudent = `-- name: DeleteStudent :execresult
DELETE FROM students WHERE id = $1
`

func (q *Queries) DeleteStudent(ctx context.Context, id int64) (sql.Result, error) {
	return q.exec(ctx, q.deleteStudentStmt, deleteStudent, id)
}

const getStudentByID = `-- name: GetStudentByID :one
SELECT id, user_id, courses, updated_at FROM students WHERE id = $1
`

func (q *Queries) GetStudentByID(ctx context.Context, id int64) (Student, error) {
	row := q.queryRow(ctx, q.getStudentByIDStmt, getStudentByID, id)
	var i Student
	err := row.Scan(
		&i.ID,
		&i.UserID,
		pq.Array(&i.Courses),
		&i.UpdatedAt,
	)
	return i, err
}

const getStudentByUserID = `-- name: GetStudentByUserID :one
SELECT id, user_id, courses, updated_at FROM students WHERE user_id = $1
`

func (q *Queries) GetStudentByUserID(ctx context.Context, userID int64) (Student, error) {
	row := q.queryRow(ctx, q.getStudentByUserIDStmt, getStudentByUserID, userID)
	var i Student
	err := row.Scan(
		&i.ID,
		&i.UserID,
		pq.Array(&i.Courses),
		&i.UpdatedAt,
	)
	return i, err
}

const updateStudentCourses = `-- name: UpdateStudentCourses :one
UPDATE students
SET courses = $2, updated_at = now()
WHERE id = $1
RETURNING id, user_id, courses, updated_at
`

type UpdateStudentCoursesParams struct {
	ID      int64    `json:"id"`
	Courses []string `json:"courses"`
}

func (q *Queries) UpdateStudentCourses(ctx context.Context, arg UpdateStudentCoursesParams) (Student, error) {
	row := q.queryRow(ctx, q.updateStudentCoursesStmt, updateStudentCourses, arg.ID, pq.Array(arg.Courses))
	var i Student
	err := row.Scan(
		&i.ID,
		&i.UserID,
		pq.Array(&i.Courses),
		&i.UpdatedAt,
	)
	return i, err
}
