// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: course.sql

package db

import (
	"context"
	"database/sql"
)

const assignLecturerToCourse = `-- name: AssignLecturerToCourse :exec
INSERT INTO course_lecturers (
    course_code,
    lecturer_id
) VALUES (
    $1, $2
)
`

type AssignLecturerToCourseParams struct {
	CourseCode string `json:"course_code"`
	LecturerID int64  `json:"lecturer_id"`
}

func (q *Queries) AssignLecturerToCourse(ctx context.Context, arg AssignLecturerToCourseParams) error {
	_, err := q.exec(ctx, q.assignLecturerToCourseStmt, assignLecturerToCourse, arg.CourseCode, arg.LecturerID)
	return err
}

const createCourse = `-- name: CreateCourse :one
INSERT INTO courses (
    name, 
    faculty, 
    department, 
    level, 
    course_code
) VALUES (
    $1, $2, $3, $4, $5
) RETURNING id, name, faculty, department, level, course_code, num_of_lectures_per_semester, lecturer_attended_count, active_lecturer_id
`

type CreateCourseParams struct {
	Name       string `json:"name"`
	Faculty    string `json:"faculty"`
	Department string `json:"department"`
	Level      string `json:"level"`
	CourseCode string `json:"course_code"`
}

func (q *Queries) CreateCourse(ctx context.Context, arg CreateCourseParams) (Course, error) {
	row := q.queryRow(ctx, q.createCourseStmt, createCourse,
		arg.Name,
		arg.Faculty,
		arg.Department,
		arg.Level,
		arg.CourseCode,
	)
	var i Course
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Faculty,
		&i.Department,
		&i.Level,
		&i.CourseCode,
		&i.NumOfLecturesPerSemester,
		&i.LecturerAttendedCount,
		&i.ActiveLecturerID,
	)
	return i, err
}

const deleteCourse = `-- name: DeleteCourse :execresult
DELETE FROM courses
WHERE course_code = $1
`

func (q *Queries) DeleteCourse(ctx context.Context, courseCode string) (sql.Result, error) {
	return q.exec(ctx, q.deleteCourseStmt, deleteCourse, courseCode)
}

const dropCourse = `-- name: DropCourse :execresult
DELETE FROM course_students
WHERE course_code = $1 AND student_id = $2
`

type DropCourseParams struct {
	CourseCode string `json:"course_code"`
	StudentID  int64  `json:"student_id"`
}

func (q *Queries) DropCourse(ctx context.Context, arg DropCourseParams) (sql.Result, error) {
	return q.exec(ctx, q.dropCourseStmt, dropCourse, arg.CourseCode, arg.StudentID)
}

const getCourse = `-- name: GetCourse :one
SELECT id, name, faculty, department, level, course_code, num_of_lectures_per_semester, lecturer_attended_count, active_lecturer_id FROM courses
WHERE course_code = $1
`

func (q *Queries) GetCourse(ctx context.Context, courseCode string) (Course, error) {
	row := q.queryRow(ctx, q.getCourseStmt, getCourse, courseCode)
	var i Course
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Faculty,
		&i.Department,
		&i.Level,
		&i.CourseCode,
		&i.NumOfLecturesPerSemester,
		&i.LecturerAttendedCount,
		&i.ActiveLecturerID,
	)
	return i, err
}

const getCourseMetaData = `-- name: GetCourseMetaData :one
SELECT
    c.name,
    c.faculty,
    c.department,
    c.level
FROM courses c
WHERE c.course_code = $1
`

type GetCourseMetaDataRow struct {
	Name       string `json:"name"`
	Faculty    string `json:"faculty"`
	Department string `json:"department"`
	Level      string `json:"level"`
}

func (q *Queries) GetCourseMetaData(ctx context.Context, courseCode string) (GetCourseMetaDataRow, error) {
	row := q.queryRow(ctx, q.getCourseMetaDataStmt, getCourseMetaData, courseCode)
	var i GetCourseMetaDataRow
	err := row.Scan(
		&i.Name,
		&i.Faculty,
		&i.Department,
		&i.Level,
	)
	return i, err
}

const getCoursesFiltered = `-- name: GetCoursesFiltered :many
SELECT id, name, faculty, department, level, course_code, num_of_lectures_per_semester, lecturer_attended_count, active_lecturer_id FROM courses
WHERE
    ($1::TEXT IS NULL OR faculty = $1::TEXT) AND
    ($2::TEXT IS NULL OR department = $2::TEXT) AND
    ($3::TEXT IS NULL OR level = $3::TEXT)
`

type GetCoursesFilteredParams struct {
	Faculty    sql.NullString `json:"faculty"`
	Department sql.NullString `json:"department"`
	Level      sql.NullString `json:"level"`
}

func (q *Queries) GetCoursesFiltered(ctx context.Context, arg GetCoursesFilteredParams) ([]Course, error) {
	rows, err := q.query(ctx, q.getCoursesFilteredStmt, getCoursesFiltered, arg.Faculty, arg.Department, arg.Level)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Course{}
	for rows.Next() {
		var i Course
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Faculty,
			&i.Department,
			&i.Level,
			&i.CourseCode,
			&i.NumOfLecturesPerSemester,
			&i.LecturerAttendedCount,
			&i.ActiveLecturerID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const registerCourse = `-- name: RegisterCourse :exec
INSERT INTO course_students (
    course_code,
    student_id
) VALUES (
    $1, $2
)
`

type RegisterCourseParams struct {
	CourseCode string `json:"course_code"`
	StudentID  int64  `json:"student_id"`
}

func (q *Queries) RegisterCourse(ctx context.Context, arg RegisterCourseParams) error {
	_, err := q.exec(ctx, q.registerCourseStmt, registerCourse, arg.CourseCode, arg.StudentID)
	return err
}

const removeActiveLecturer = `-- name: RemoveActiveLecturer :exec
UPDATE courses
set active_lecturer_id = 0
WHERE active_lecturer_id = $1 AND course_code = $2
`

type RemoveActiveLecturerParams struct {
	ActiveLecturerID int64  `json:"active_lecturer_id"`
	CourseCode       string `json:"course_code"`
}

func (q *Queries) RemoveActiveLecturer(ctx context.Context, arg RemoveActiveLecturerParams) error {
	_, err := q.exec(ctx, q.removeActiveLecturerStmt, removeActiveLecturer, arg.ActiveLecturerID, arg.CourseCode)
	return err
}

const setActiveLecturer = `-- name: SetActiveLecturer :exec
UPDATE courses 
SET
    active_lecturer_id = $1
WHERE active_lecturer_id = 0 AND course_code = $2
`

type SetActiveLecturerParams struct {
	ActiveLecturerID int64  `json:"active_lecturer_id"`
	CourseCode       string `json:"course_code"`
}

func (q *Queries) SetActiveLecturer(ctx context.Context, arg SetActiveLecturerParams) error {
	_, err := q.exec(ctx, q.setActiveLecturerStmt, setActiveLecturer, arg.ActiveLecturerID, arg.CourseCode)
	return err
}

const unassignLecturerFromCourse = `-- name: UnassignLecturerFromCourse :execresult
DELETE FROM course_lecturers
WHERE course_code = $1 AND lecturer_id = $2
`

type UnassignLecturerFromCourseParams struct {
	CourseCode string `json:"course_code"`
	LecturerID int64  `json:"lecturer_id"`
}

func (q *Queries) UnassignLecturerFromCourse(ctx context.Context, arg UnassignLecturerFromCourseParams) (sql.Result, error) {
	return q.exec(ctx, q.unassignLecturerFromCourseStmt, unassignLecturerFromCourse, arg.CourseCode, arg.LecturerID)
}

const updateCourseNumberOfLecturesPerSemester = `-- name: UpdateCourseNumberOfLecturesPerSemester :exec
UPDATE courses
SET num_of_lectures_per_semester = $2
WHERE course_code = $1
`

type UpdateCourseNumberOfLecturesPerSemesterParams struct {
	CourseCode               string `json:"course_code"`
	NumOfLecturesPerSemester int32  `json:"num_of_lectures_per_semester"`
}

func (q *Queries) UpdateCourseNumberOfLecturesPerSemester(ctx context.Context, arg UpdateCourseNumberOfLecturesPerSemesterParams) error {
	_, err := q.exec(ctx, q.updateCourseNumberOfLecturesPerSemesterStmt, updateCourseNumberOfLecturesPerSemester, arg.CourseCode, arg.NumOfLecturesPerSemester)
	return err
}

const updateLecturerAttendedCount = `-- name: UpdateLecturerAttendedCount :exec
UPDATE courses
SET lecturer_attended_count = lecturer_attended_count + 1
WHERE course_code = $1
`

func (q *Queries) UpdateLecturerAttendedCount(ctx context.Context, courseCode string) error {
	_, err := q.exec(ctx, q.updateLecturerAttendedCountStmt, updateLecturerAttendedCount, courseCode)
	return err
}
