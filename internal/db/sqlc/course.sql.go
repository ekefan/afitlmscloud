// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: course.sql

package db

import (
	"context"
	"database/sql"
)

const assignLecturerToCourse = `-- name: AssignLecturerToCourse :exec
INSERT INTO course_lecturers (
    course_code,
    lecturer_id
) VALUES (
    $1, $2
)
`

type AssignLecturerToCourseParams struct {
	CourseCode string `json:"course_code"`
	LecturerID int64  `json:"lecturer_id"`
}

func (q *Queries) AssignLecturerToCourse(ctx context.Context, arg AssignLecturerToCourseParams) error {
	_, err := q.exec(ctx, q.assignLecturerToCourseStmt, assignLecturerToCourse, arg.CourseCode, arg.LecturerID)
	return err
}

const createCourse = `-- name: CreateCourse :one
INSERT INTO courses (
    name, 
    faculty, 
    department, 
    level, 
    course_code
) VALUES (
    $1, $2, $3, $4, $5
) RETURNING id, name, faculty, department, level, course_code, num_of_lectures_per_semester, active_lecturer_id
`

type CreateCourseParams struct {
	Name       string `json:"name"`
	Faculty    string `json:"faculty"`
	Department string `json:"department"`
	Level      string `json:"level"`
	CourseCode string `json:"course_code"`
}

func (q *Queries) CreateCourse(ctx context.Context, arg CreateCourseParams) (Course, error) {
	row := q.queryRow(ctx, q.createCourseStmt, createCourse,
		arg.Name,
		arg.Faculty,
		arg.Department,
		arg.Level,
		arg.CourseCode,
	)
	var i Course
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Faculty,
		&i.Department,
		&i.Level,
		&i.CourseCode,
		&i.NumOfLecturesPerSemester,
		&i.ActiveLecturerID,
	)
	return i, err
}

const dropCourse = `-- name: DropCourse :execresult
DELETE FROM course_students
WHERE course_code = $1 AND student_id = $2
`

type DropCourseParams struct {
	CourseCode string `json:"course_code"`
	StudentID  int64  `json:"student_id"`
}

func (q *Queries) DropCourse(ctx context.Context, arg DropCourseParams) (sql.Result, error) {
	return q.exec(ctx, q.dropCourseStmt, dropCourse, arg.CourseCode, arg.StudentID)
}

const registerCourse = `-- name: RegisterCourse :exec
INSERT INTO course_students (
    course_code,
    student_id
) VALUES (
    $1, $2
)
`

type RegisterCourseParams struct {
	CourseCode string `json:"course_code"`
	StudentID  int64  `json:"student_id"`
}

func (q *Queries) RegisterCourse(ctx context.Context, arg RegisterCourseParams) error {
	_, err := q.exec(ctx, q.registerCourseStmt, registerCourse, arg.CourseCode, arg.StudentID)
	return err
}

const setActiveLecturer = `-- name: SetActiveLecturer :exec
UPDATE courses 
SET
    active_lecturer_id = $1
WHERE active_lecturer_id = 0 AND course_code = $2
`

type SetActiveLecturerParams struct {
	ActiveLecturerID int64  `json:"active_lecturer_id"`
	CourseCode       string `json:"course_code"`
}

func (q *Queries) SetActiveLecturer(ctx context.Context, arg SetActiveLecturerParams) error {
	_, err := q.exec(ctx, q.setActiveLecturerStmt, setActiveLecturer, arg.ActiveLecturerID, arg.CourseCode)
	return err
}

const unassignLecturerFromCourse = `-- name: UnassignLecturerFromCourse :execresult
DELETE FROM course_lecturers
WHERE course_code = $1 AND lecturer_id = $2
`

type UnassignLecturerFromCourseParams struct {
	CourseCode string `json:"course_code"`
	LecturerID int64  `json:"lecturer_id"`
}

func (q *Queries) UnassignLecturerFromCourse(ctx context.Context, arg UnassignLecturerFromCourseParams) (sql.Result, error) {
	return q.exec(ctx, q.unassignLecturerFromCourseStmt, unassignLecturerFromCourse, arg.CourseCode, arg.LecturerID)
}
