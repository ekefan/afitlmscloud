// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: attendance.sql

package db

import (
	"context"
	"time"
)

const createLectureAttendance = `-- name: CreateLectureAttendance :exec
INSERT INTO lecture_attendance (
    session_id,
    student_id,
    attendance_time,
    attended
) VALUES (
    $1, $2, $3, $4
)
`

type CreateLectureAttendanceParams struct {
	SessionID      int64     `json:"session_id"`
	StudentID      int64     `json:"student_id"`
	AttendanceTime time.Time `json:"attendance_time"`
	Attended       bool      `json:"attended"`
}

func (q *Queries) CreateLectureAttendance(ctx context.Context, arg CreateLectureAttendanceParams) error {
	_, err := q.exec(ctx, q.createLectureAttendanceStmt, createLectureAttendance,
		arg.SessionID,
		arg.StudentID,
		arg.AttendanceTime,
		arg.Attended,
	)
	return err
}

const createLectureSession = `-- name: CreateLectureSession :one
INSERT INTO lecture_sessions (
    course_code,
    lecturer_id,
    session_date
) VALUES (
    $1, $2, $3
) RETURNING id
`

type CreateLectureSessionParams struct {
	CourseCode  string    `json:"course_code"`
	LecturerID  int64     `json:"lecturer_id"`
	SessionDate time.Time `json:"session_date"`
}

func (q *Queries) CreateLectureSession(ctx context.Context, arg CreateLectureSessionParams) (int64, error) {
	row := q.queryRow(ctx, q.createLectureSessionStmt, createLectureSession, arg.CourseCode, arg.LecturerID, arg.SessionDate)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const getLectureAttendance = `-- name: GetLectureAttendance :many
SELECT session_id, student_id, attendance_time, attended, created_at FROM lecture_attendance
WHERE session_id = $1
`

func (q *Queries) GetLectureAttendance(ctx context.Context, sessionID int64) ([]LectureAttendance, error) {
	rows, err := q.query(ctx, q.getLectureAttendanceStmt, getLectureAttendance, sessionID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []LectureAttendance{}
	for rows.Next() {
		var i LectureAttendance
		if err := rows.Scan(
			&i.SessionID,
			&i.StudentID,
			&i.AttendanceTime,
			&i.Attended,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getLectureSession = `-- name: GetLectureSession :many
SELECT id, course_code, lecturer_id, session_date, created_at FROM lecture_sessions
WHERE course_code = $1
`

func (q *Queries) GetLectureSession(ctx context.Context, courseCode string) ([]LectureSession, error) {
	rows, err := q.query(ctx, q.getLectureSessionStmt, getLectureSession, courseCode)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []LectureSession{}
	for rows.Next() {
		var i LectureSession
		if err := rows.Scan(
			&i.ID,
			&i.CourseCode,
			&i.LecturerID,
			&i.SessionDate,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
